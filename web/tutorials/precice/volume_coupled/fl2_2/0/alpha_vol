FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      alpha_vol;
}

#include "$FOAM_CASE/Parameters"
dimensions      [0 0 0 0 0 0 0];

internalField   #codeStream
{
        codeInclude
        #{
                #include "fvMesh.H"
        #};

        codeOptions
        #{
                -I$(LIB_SRC)/finiteVolume/lnInclude \
                -I$(LIB_SRC)/meshTools/lnInclude
        #};
        codeLibs
        #{
                -lfiniteVolume -lmeshTools
        #};
	code
        #{
                const IOdictionary& d = static_cast<const IOdictionary&>(dict);
                const fvMesh& mesh = refCast<const fvMesh>(d.db());

                const vectorField& cellMidpoints = mesh.cellCentres();
                const scalarField y(cellMidpoints.component(vector::Y));
                const scalarField x(cellMidpoints.component(vector::X));

		scalarField alpha(y.size(), 0);
		forAll(alpha, i)
		{
                    //if (x[i] > 0.2 && x[i] < 0.3)
                    //{
                    //    //if (y[i] < 0.04)
                    //    //{
                    //    //    alpha[i] = 1;
                    //    //}
                    //}
                    if(y[i] < $waterHeight)
		    {
		         alpha[i] = 1;
		    }
		}

                alpha.writeEntry("", os);
        #};
};

boundaryField
{
    inlet
    {
        type            zeroGradient;
    }

    outlet
    {
        type            zeroGradient;
    }

    wall
    {
        type            fixedValue;
        value           uniform 1;
    }

    atmosphere
    {

        type            inletOutlet;
        inletValue      uniform 0;
        value           uniform 0;
    }

    defaultFaces
    {
        type            empty;
    }
}
