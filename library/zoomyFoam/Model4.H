#pragma once
#include "List.H"
#include "vector.H"
#include "scalar.H"

namespace Model
{
constexpr int n_dof_q    = 12;
constexpr int n_dof_qaux = 24;
constexpr int dimension  = 2;
const Foam::List<Foam::word> map_boundary_tag_to_function_index{ "wall", "inflow", "outflow" };

inline Foam::List<Foam::List<Foam::scalar>> flux_x(
    const Foam::List<Foam::scalar>& Q,
    const Foam::List<Foam::scalar>& Qaux)
{
    auto res = Foam::List<Foam::List<Foam::scalar>>(12, Foam::List<Foam::scalar>(1, 0.0));
    Foam::scalar t0 = (1.0 / Foam::pow(Q[1], 1));
        Foam::scalar t1 = Foam::pow(Q[3], 2)*t0;
        Foam::scalar t2 = Foam::pow(Q[4], 2)*t0;
        Foam::scalar t3 = Foam::pow(Q[5], 2)*t0;
        Foam::scalar t4 = Foam::pow(Q[6], 2)*t0;
        Foam::scalar t5 = Q[2]*t0;
        Foam::scalar t6 = 2*t5;
        Foam::scalar t7 = Q[4]*t0;
        Foam::scalar t8 = Q[3]*t7;
        Foam::scalar t9 = Q[5]*t7;
        Foam::scalar t10 = Q[5]*t0;
        Foam::scalar t11 = Q[6]*t10;
        Foam::scalar t12 = Q[3]*t10;
        Foam::scalar t13 = Q[6]*t7;
        Foam::scalar t14 = Q[3]*t0;
        Foam::scalar t15 = Q[10]*t10;
        Foam::scalar t16 = Q[6]*t0;
        Foam::scalar t17 = Q[11]*t16;
        Foam::scalar t18 = Q[8]*t14;
        Foam::scalar t19 = Q[9]*t7;
        Foam::scalar t20 = Q[7]*t0;
        Foam::scalar t21 = Q[10]*t7;
        Foam::scalar t22 = Q[10]*t16;
        Foam::scalar t23 = Q[11]*t10;
        Foam::scalar t24 = Q[9]*t14;
        Foam::scalar t25 = Q[8]*t7;
        Foam::scalar t26 = Q[9]*t10;
        Foam::scalar t27 = Q[10]*t14;
        Foam::scalar t28 = Q[11]*t7;
        Foam::scalar t29 = Q[8]*t10;
        Foam::scalar t30 = Q[9]*t16;
        res[0][0] = 0;
        res[1][0] = Q[2];
        res[2][0] = (1.0/2.0)*1.0*9.81*Foam::pow(Q[1], 2) + Foam::pow(Q[2], 2)*t0 + (1.0/3.0)*t1 + (1.0/5.0)*t2 + (1.0/7.0)*t3 + (1.0/9.0)*t4;
        res[3][0] = Q[3]*t6 + (8.0/21.0)*t11 + (4.0/5.0)*t8 + (18.0/35.0)*t9;
        res[4][0] = Q[4]*t6 + (2.0/3.0)*t1 + (6.0/7.0)*t12 + (4.0/7.0)*t13 + (2.0/7.0)*t2 + (4.0/21.0)*t3 + (100.0/693.0)*t4;
        res[5][0] = Q[5]*t6 + (8.0/9.0)*Q[6]*t14 + (4.0/11.0)*t11 + (6.0/5.0)*t8 + (8.0/15.0)*t9;
        res[6][0] = Q[6]*t6 + (8.0/7.0)*t12 + (40.0/77.0)*t13 + (18.0/35.0)*t2 + (18.0/77.0)*t3 + (162.0/1001.0)*t4;
        res[7][0] = Q[7]*t5 + (1.0/7.0)*t15 + (1.0/9.0)*t17 + (1.0/3.0)*t18 + (1.0/5.0)*t19;
        res[8][0] = Q[3]*t20 + Q[8]*t5 + (9.0/35.0)*t21 + (4.0/21.0)*t22 + (4.0/21.0)*t23 + (2.0/5.0)*t24 + (2.0/5.0)*t25 + (9.0/35.0)*t26;
        res[9][0] = Q[4]*t20 + Q[9]*t5 + (4.0/21.0)*t15 + (100.0/693.0)*t17 + (2.0/3.0)*t18 + (2.0/7.0)*t19 + (3.0/7.0)*t27 + (2.0/7.0)*t28 + (3.0/7.0)*t29 + (2.0/7.0)*t30;
        res[10][0] = Q[10]*t5 + (4.0/9.0)*Q[11]*t14 + Q[5]*t20 + (4.0/9.0)*Q[8]*t16 + (4.0/15.0)*t21 + (2.0/11.0)*t22 + (2.0/11.0)*t23 + (3.0/5.0)*t24 + (3.0/5.0)*t25 + (4.0/15.0)*t26;
        res[11][0] = Q[11]*t5 + Q[6]*t20 + (18.0/77.0)*t15 + (162.0/1001.0)*t17 + (18.0/35.0)*t19 + (4.0/7.0)*t27 + (20.0/77.0)*t28 + (4.0/7.0)*t29 + (20.0/77.0)*t30;
    return res;
}
        

inline Foam::List<Foam::List<Foam::scalar>> flux_y(
    const Foam::List<Foam::scalar>& Q,
    const Foam::List<Foam::scalar>& Qaux)
{
    auto res = Foam::List<Foam::List<Foam::scalar>>(12, Foam::List<Foam::scalar>(1, 0.0));
    Foam::scalar t0 = (1.0 / Foam::pow(Q[1], 1));
        Foam::scalar t1 = Q[2]*t0;
        Foam::scalar t2 = Q[10]*t0;
        Foam::scalar t3 = Q[5]*t2;
        Foam::scalar t4 = Q[11]*t0;
        Foam::scalar t5 = Q[6]*t4;
        Foam::scalar t6 = Q[3]*t0;
        Foam::scalar t7 = Q[8]*t6;
        Foam::scalar t8 = Q[4]*t0;
        Foam::scalar t9 = Q[9]*t8;
        Foam::scalar t10 = Q[7]*t0;
        Foam::scalar t11 = Q[10]*t8;
        Foam::scalar t12 = Q[6]*t2;
        Foam::scalar t13 = Q[5]*t4;
        Foam::scalar t14 = Q[9]*t6;
        Foam::scalar t15 = Q[8]*t8;
        Foam::scalar t16 = Q[9]*t0;
        Foam::scalar t17 = Q[5]*t16;
        Foam::scalar t18 = Q[10]*t6;
        Foam::scalar t19 = Q[11]*t8;
        Foam::scalar t20 = Q[8]*t0;
        Foam::scalar t21 = Q[5]*t20;
        Foam::scalar t22 = Q[6]*t16;
        Foam::scalar t23 = Foam::pow(Q[10], 2)*t0;
        Foam::scalar t24 = Foam::pow(Q[11], 2)*t0;
        Foam::scalar t25 = Foam::pow(Q[8], 2)*t0;
        Foam::scalar t26 = Foam::pow(Q[9], 2)*t0;
        Foam::scalar t27 = Q[11]*t2;
        Foam::scalar t28 = Q[9]*t2;
        Foam::scalar t29 = 2*t10;
        Foam::scalar t30 = Q[8]*t16;
        Foam::scalar t31 = Q[8]*t2;
        Foam::scalar t32 = Q[9]*t4;
        res[0][0] = 0;
        res[1][0] = Q[7];
        res[2][0] = Q[7]*t1 + (1.0/7.0)*t3 + (1.0/9.0)*t5 + (1.0/3.0)*t7 + (1.0/5.0)*t9;
        res[3][0] = Q[3]*t10 + Q[8]*t1 + (9.0/35.0)*t11 + (4.0/21.0)*t12 + (4.0/21.0)*t13 + (2.0/5.0)*t14 + (2.0/5.0)*t15 + (9.0/35.0)*t17;
        res[4][0] = Q[4]*t10 + Q[9]*t1 + (3.0/7.0)*t18 + (2.0/7.0)*t19 + (3.0/7.0)*t21 + (2.0/7.0)*t22 + (4.0/21.0)*t3 + (100.0/693.0)*t5 + (2.0/3.0)*t7 + (2.0/7.0)*t9;
        res[5][0] = Q[10]*t1 + (4.0/9.0)*Q[11]*t6 + Q[5]*t10 + (4.0/9.0)*Q[6]*t20 + (4.0/15.0)*t11 + (2.0/11.0)*t12 + (2.0/11.0)*t13 + (3.0/5.0)*t14 + (3.0/5.0)*t15 + (4.0/15.0)*t17;
        res[6][0] = Q[11]*t1 + Q[6]*t10 + (4.0/7.0)*t18 + (20.0/77.0)*t19 + (4.0/7.0)*t21 + (20.0/77.0)*t22 + (18.0/77.0)*t3 + (162.0/1001.0)*t5 + (18.0/35.0)*t9;
        res[7][0] = (1.0/2.0)*1.0*9.81*Foam::pow(Q[1], 2) + Foam::pow(Q[7], 2)*t0 + (1.0/7.0)*t23 + (1.0/9.0)*t24 + (1.0/3.0)*t25 + (1.0/5.0)*t26;
        res[8][0] = Q[8]*t29 + (8.0/21.0)*t27 + (18.0/35.0)*t28 + (4.0/5.0)*t30;
        res[9][0] = Q[9]*t29 + (4.0/21.0)*t23 + (100.0/693.0)*t24 + (2.0/3.0)*t25 + (2.0/7.0)*t26 + (6.0/7.0)*t31 + (4.0/7.0)*t32;
        res[10][0] = Q[10]*t29 + (8.0/9.0)*Q[8]*t4 + (4.0/11.0)*t27 + (8.0/15.0)*t28 + (6.0/5.0)*t30;
        res[11][0] = Q[11]*t29 + (18.0/77.0)*t23 + (162.0/1001.0)*t24 + (18.0/35.0)*t26 + (8.0/7.0)*t31 + (40.0/77.0)*t32;
    return res;
}
        

inline Foam::List<Foam::List<Foam::scalar>> flux_jacobian_x(
    const Foam::List<Foam::scalar>& Q,
    const Foam::List<Foam::scalar>& Qaux)
{
    auto res = Foam::List<Foam::List<Foam::scalar>>(12, Foam::List<Foam::scalar>(12, 0.0));
    Foam::scalar t0 = (1.0 / Foam::pow(Q[1], 2));
        Foam::scalar t1 = Foam::pow(Q[3], 2)*t0;
        Foam::scalar t2 = Foam::pow(Q[4], 2)*t0;
        Foam::scalar t3 = Foam::pow(Q[5], 2)*t0;
        Foam::scalar t4 = Foam::pow(Q[6], 2)*t0;
        Foam::scalar t5 = (1.0 / Foam::pow(Q[1], 1));
        Foam::scalar t6 = Q[2]*t5;
        Foam::scalar t7 = 2*t6;
        Foam::scalar t8 = Q[3]*t5;
        Foam::scalar t9 = (2.0/3.0)*t8;
        Foam::scalar t10 = Q[4]*t5;
        Foam::scalar t11 = (2.0/5.0)*t10;
        Foam::scalar t12 = Q[5]*t5;
        Foam::scalar t13 = Q[6]*t5;
        Foam::scalar t14 = Q[2]*t0;
        Foam::scalar t15 = 2*t14;
        Foam::scalar t16 = Q[4]*t0;
        Foam::scalar t17 = Q[3]*t16;
        Foam::scalar t18 = Q[5]*t0;
        Foam::scalar t19 = Q[4]*t18;
        Foam::scalar t20 = Q[6]*t18;
        Foam::scalar t21 = (18.0/35.0)*t10;
        Foam::scalar t22 = (8.0/21.0)*t12;
        Foam::scalar t23 = Q[3]*t18;
        Foam::scalar t24 = Q[6]*t16;
        Foam::scalar t25 = (4.0/7.0)*t10;
        Foam::scalar t26 = Q[3]*t0;
        Foam::scalar t27 = Q[10]*t18;
        Foam::scalar t28 = Q[6]*t0;
        Foam::scalar t29 = Q[11]*t28;
        Foam::scalar t30 = Q[8]*t26;
        Foam::scalar t31 = Q[9]*t16;
        Foam::scalar t32 = Q[7]*t5;
        Foam::scalar t33 = Q[8]*t5;
        Foam::scalar t34 = Q[9]*t5;
        Foam::scalar t35 = Q[10]*t5;
        Foam::scalar t36 = Q[11]*t5;
        Foam::scalar t37 = Q[7]*t0;
        Foam::scalar t38 = Q[10]*t16;
        Foam::scalar t39 = Q[10]*t28;
        Foam::scalar t40 = Q[11]*t18;
        Foam::scalar t41 = Q[9]*t26;
        Foam::scalar t42 = Q[8]*t16;
        Foam::scalar t43 = Q[9]*t18;
        Foam::scalar t44 = (4.0/21.0)*t35;
        Foam::scalar t45 = (4.0/21.0)*t12;
        Foam::scalar t46 = Q[10]*t26;
        Foam::scalar t47 = Q[11]*t16;
        Foam::scalar t48 = Q[8]*t18;
        Foam::scalar t49 = Q[9]*t28;
        Foam::scalar t50 = (2.0/7.0)*t34;
        Foam::scalar t51 = (2.0/7.0)*t10;
        res[0][0] = 0;
        res[0][1] = 0;
        res[0][2] = 0;
        res[0][3] = 0;
        res[0][4] = 0;
        res[0][5] = 0;
        res[0][6] = 0;
        res[0][7] = 0;
        res[0][8] = 0;
        res[0][9] = 0;
        res[0][10] = 0;
        res[0][11] = 0;
        res[1][0] = 0;
        res[1][1] = 0;
        res[1][2] = 1;
        res[1][3] = 0;
        res[1][4] = 0;
        res[1][5] = 0;
        res[1][6] = 0;
        res[1][7] = 0;
        res[1][8] = 0;
        res[1][9] = 0;
        res[1][10] = 0;
        res[1][11] = 0;
        res[2][0] = 0;
        res[2][1] = 1.0*9.81*Q[1] - Foam::pow(Q[2], 2)*t0 - 1.0/3.0*t1 - 1.0/5.0*t2 - 1.0/7.0*t3 - 1.0/9.0*t4;
        res[2][2] = t7;
        res[2][3] = t9;
        res[2][4] = t11;
        res[2][5] = (2.0/7.0)*t12;
        res[2][6] = (2.0/9.0)*t13;
        res[2][7] = 0;
        res[2][8] = 0;
        res[2][9] = 0;
        res[2][10] = 0;
        res[2][11] = 0;
        res[3][0] = 0;
        res[3][1] = -Q[3]*t15 - 4.0/5.0*t17 - 18.0/35.0*t19 - 8.0/21.0*t20;
        res[3][2] = 2*t8;
        res[3][3] = (4.0/5.0)*t10 + t7;
        res[3][4] = (18.0/35.0)*t12 + (4.0/5.0)*t8;
        res[3][5] = (8.0/21.0)*t13 + t21;
        res[3][6] = t22;
        res[3][7] = 0;
        res[3][8] = 0;
        res[3][9] = 0;
        res[3][10] = 0;
        res[3][11] = 0;
        res[4][0] = 0;
        res[4][1] = -Q[4]*t15 - 2.0/3.0*t1 - 2.0/7.0*t2 - 6.0/7.0*t23 - 4.0/7.0*t24 - 4.0/21.0*t3 - 100.0/693.0*t4;
        res[4][2] = 2*t10;
        res[4][3] = (6.0/7.0)*t12 + (4.0/3.0)*t8;
        res[4][4] = (4.0/7.0)*t13 + t25 + t7;
        res[4][5] = t22 + (6.0/7.0)*t8;
        res[4][6] = (200.0/693.0)*t13 + t25;
        res[4][7] = 0;
        res[4][8] = 0;
        res[4][9] = 0;
        res[4][10] = 0;
        res[4][11] = 0;
        res[5][0] = 0;
        res[5][1] = -Q[5]*t15 - 8.0/9.0*Q[6]*t26 - 6.0/5.0*t17 - 8.0/15.0*t19 - 4.0/11.0*t20;
        res[5][2] = 2*t12;
        res[5][3] = (6.0/5.0)*t10 + (8.0/9.0)*t13;
        res[5][4] = (8.0/15.0)*t12 + (6.0/5.0)*t8;
        res[5][5] = (8.0/15.0)*t10 + (4.0/11.0)*t13 + t7;
        res[5][6] = (4.0/11.0)*t12 + (8.0/9.0)*t8;
        res[5][7] = 0;
        res[5][8] = 0;
        res[5][9] = 0;
        res[5][10] = 0;
        res[5][11] = 0;
        res[6][0] = 0;
        res[6][1] = -Q[6]*t15 - 18.0/35.0*t2 - 8.0/7.0*t23 - 40.0/77.0*t24 - 18.0/77.0*t3 - 162.0/1001.0*t4;
        res[6][2] = 2*t13;
        res[6][3] = (8.0/7.0)*t12;
        res[6][4] = (36.0/35.0)*t10 + (40.0/77.0)*t13;
        res[6][5] = (36.0/77.0)*t12 + (8.0/7.0)*t8;
        res[6][6] = (40.0/77.0)*t10 + (324.0/1001.0)*t13 + t7;
        res[6][7] = 0;
        res[6][8] = 0;
        res[6][9] = 0;
        res[6][10] = 0;
        res[6][11] = 0;
        res[7][0] = 0;
        res[7][1] = -Q[7]*t14 - 1.0/7.0*t27 - 1.0/9.0*t29 - 1.0/3.0*t30 - 1.0/5.0*t31;
        res[7][2] = t32;
        res[7][3] = (1.0/3.0)*t33;
        res[7][4] = (1.0/5.0)*t34;
        res[7][5] = (1.0/7.0)*t35;
        res[7][6] = (1.0/9.0)*t36;
        res[7][7] = t6;
        res[7][8] = (1.0/3.0)*t8;
        res[7][9] = (1.0/5.0)*t10;
        res[7][10] = (1.0/7.0)*t12;
        res[7][11] = (1.0/9.0)*t13;
        res[8][0] = 0;
        res[8][1] = -Q[3]*t37 - Q[8]*t14 - 9.0/35.0*t38 - 4.0/21.0*t39 - 4.0/21.0*t40 - 2.0/5.0*t41 - 2.0/5.0*t42 - 9.0/35.0*t43;
        res[8][2] = t33;
        res[8][3] = t32 + (2.0/5.0)*t34;
        res[8][4] = (2.0/5.0)*t33 + (9.0/35.0)*t35;
        res[8][5] = (9.0/35.0)*t34 + (4.0/21.0)*t36;
        res[8][6] = t44;
        res[8][7] = t8;
        res[8][8] = t11 + t6;
        res[8][9] = (9.0/35.0)*t12 + (2.0/5.0)*t8;
        res[8][10] = (9.0/35.0)*t10 + (4.0/21.0)*t13;
        res[8][11] = t45;
        res[9][0] = 0;
        res[9][1] = -Q[4]*t37 - Q[9]*t14 - 4.0/21.0*t27 - 100.0/693.0*t29 - 2.0/3.0*t30 - 2.0/7.0*t31 - 3.0/7.0*t46 - 2.0/7.0*t47 - 3.0/7.0*t48 - 2.0/7.0*t49;
        res[9][2] = t34;
        res[9][3] = (2.0/3.0)*t33 + (3.0/7.0)*t35;
        res[9][4] = t32 + (2.0/7.0)*t36 + t50;
        res[9][5] = (3.0/7.0)*t33 + t44;
        res[9][6] = (100.0/693.0)*t36 + t50;
        res[9][7] = t10;
        res[9][8] = (3.0/7.0)*t12 + t9;
        res[9][9] = (2.0/7.0)*t13 + t51 + t6;
        res[9][10] = t45 + (3.0/7.0)*t8;
        res[9][11] = (100.0/693.0)*t13 + t51;
        res[10][0] = 0;
        res[10][1] = -Q[10]*t14 - 4.0/9.0*Q[11]*t26 - Q[5]*t37 - 4.0/9.0*Q[8]*t28 - 4.0/15.0*t38 - 2.0/11.0*t39 - 2.0/11.0*t40 - 3.0/5.0*t41 - 3.0/5.0*t42 - 4.0/15.0*t43;
        res[10][2] = t35;
        res[10][3] = (3.0/5.0)*t34 + (4.0/9.0)*t36;
        res[10][4] = (3.0/5.0)*t33 + (4.0/15.0)*t35;
        res[10][5] = t32 + (4.0/15.0)*t34 + (2.0/11.0)*t36;
        res[10][6] = (4.0/9.0)*t33 + (2.0/11.0)*t35;
        res[10][7] = t12;
        res[10][8] = (3.0/5.0)*t10 + (4.0/9.0)*t13;
        res[10][9] = (4.0/15.0)*t12 + (3.0/5.0)*t8;
        res[10][10] = (4.0/15.0)*t10 + (2.0/11.0)*t13 + t6;
        res[10][11] = (2.0/11.0)*t12 + (4.0/9.0)*t8;
        res[11][0] = 0;
        res[11][1] = -Q[11]*t14 - Q[6]*t37 - 18.0/77.0*t27 - 162.0/1001.0*t29 - 18.0/35.0*t31 - 4.0/7.0*t46 - 20.0/77.0*t47 - 4.0/7.0*t48 - 20.0/77.0*t49;
        res[11][2] = t36;
        res[11][3] = (4.0/7.0)*t35;
        res[11][4] = (18.0/35.0)*t34 + (20.0/77.0)*t36;
        res[11][5] = (4.0/7.0)*t33 + (18.0/77.0)*t35;
        res[11][6] = t32 + (20.0/77.0)*t34 + (162.0/1001.0)*t36;
        res[11][7] = t13;
        res[11][8] = (4.0/7.0)*t12;
        res[11][9] = (20.0/77.0)*t13 + t21;
        res[11][10] = (18.0/77.0)*t12 + (4.0/7.0)*t8;
        res[11][11] = (20.0/77.0)*t10 + (162.0/1001.0)*t13 + t6;
    return res;
}
        

inline Foam::List<Foam::List<Foam::scalar>> flux_jacobian_y(
    const Foam::List<Foam::scalar>& Q,
    const Foam::List<Foam::scalar>& Qaux)
{
    auto res = Foam::List<Foam::List<Foam::scalar>>(12, Foam::List<Foam::scalar>(12, 0.0));
    Foam::scalar t0 = (1.0 / Foam::pow(Q[1], 2));
        Foam::scalar t1 = Q[2]*t0;
        Foam::scalar t2 = Q[5]*t0;
        Foam::scalar t3 = Q[10]*t2;
        Foam::scalar t4 = Q[6]*t0;
        Foam::scalar t5 = Q[11]*t4;
        Foam::scalar t6 = Q[3]*t0;
        Foam::scalar t7 = Q[8]*t6;
        Foam::scalar t8 = Q[4]*t0;
        Foam::scalar t9 = Q[9]*t8;
        Foam::scalar t10 = (1.0 / Foam::pow(Q[1], 1));
        Foam::scalar t11 = Q[7]*t10;
        Foam::scalar t12 = Q[8]*t10;
        Foam::scalar t13 = Q[9]*t10;
        Foam::scalar t14 = Q[10]*t10;
        Foam::scalar t15 = Q[11]*t10;
        Foam::scalar t16 = Q[2]*t10;
        Foam::scalar t17 = Q[3]*t10;
        Foam::scalar t18 = Q[4]*t10;
        Foam::scalar t19 = Q[5]*t10;
        Foam::scalar t20 = Q[6]*t10;
        Foam::scalar t21 = Q[7]*t0;
        Foam::scalar t22 = Q[10]*t8;
        Foam::scalar t23 = Q[10]*t4;
        Foam::scalar t24 = Q[11]*t2;
        Foam::scalar t25 = Q[9]*t6;
        Foam::scalar t26 = Q[8]*t8;
        Foam::scalar t27 = Q[9]*t2;
        Foam::scalar t28 = (2.0/5.0)*t13;
        Foam::scalar t29 = (4.0/21.0)*t14;
        Foam::scalar t30 = (4.0/21.0)*t19;
        Foam::scalar t31 = Q[10]*t6;
        Foam::scalar t32 = Q[11]*t8;
        Foam::scalar t33 = Q[8]*t2;
        Foam::scalar t34 = Q[9]*t4;
        Foam::scalar t35 = (2.0/3.0)*t12;
        Foam::scalar t36 = (2.0/7.0)*t13;
        Foam::scalar t37 = (2.0/7.0)*t18;
        Foam::scalar t38 = (18.0/35.0)*t13;
        Foam::scalar t39 = Foam::pow(Q[10], 2)*t0;
        Foam::scalar t40 = Foam::pow(Q[11], 2)*t0;
        Foam::scalar t41 = Foam::pow(Q[8], 2)*t0;
        Foam::scalar t42 = Foam::pow(Q[9], 2)*t0;
        Foam::scalar t43 = 2*t11;
        Foam::scalar t44 = Q[10]*t0;
        Foam::scalar t45 = Q[11]*t44;
        Foam::scalar t46 = Q[9]*t44;
        Foam::scalar t47 = 2*t21;
        Foam::scalar t48 = Q[9]*t0;
        Foam::scalar t49 = Q[8]*t48;
        Foam::scalar t50 = (8.0/21.0)*t14;
        Foam::scalar t51 = Q[8]*t44;
        Foam::scalar t52 = Q[11]*t48;
        Foam::scalar t53 = (4.0/7.0)*t13;
        res[0][0] = 0;
        res[0][1] = 0;
        res[0][2] = 0;
        res[0][3] = 0;
        res[0][4] = 0;
        res[0][5] = 0;
        res[0][6] = 0;
        res[0][7] = 0;
        res[0][8] = 0;
        res[0][9] = 0;
        res[0][10] = 0;
        res[0][11] = 0;
        res[1][0] = 0;
        res[1][1] = 0;
        res[1][2] = 0;
        res[1][3] = 0;
        res[1][4] = 0;
        res[1][5] = 0;
        res[1][6] = 0;
        res[1][7] = 1;
        res[1][8] = 0;
        res[1][9] = 0;
        res[1][10] = 0;
        res[1][11] = 0;
        res[2][0] = 0;
        res[2][1] = -Q[7]*t1 - 1.0/7.0*t3 - 1.0/9.0*t5 - 1.0/3.0*t7 - 1.0/5.0*t9;
        res[2][2] = t11;
        res[2][3] = (1.0/3.0)*t12;
        res[2][4] = (1.0/5.0)*t13;
        res[2][5] = (1.0/7.0)*t14;
        res[2][6] = (1.0/9.0)*t15;
        res[2][7] = t16;
        res[2][8] = (1.0/3.0)*t17;
        res[2][9] = (1.0/5.0)*t18;
        res[2][10] = (1.0/7.0)*t19;
        res[2][11] = (1.0/9.0)*t20;
        res[3][0] = 0;
        res[3][1] = -Q[3]*t21 - Q[8]*t1 - 9.0/35.0*t22 - 4.0/21.0*t23 - 4.0/21.0*t24 - 2.0/5.0*t25 - 2.0/5.0*t26 - 9.0/35.0*t27;
        res[3][2] = t12;
        res[3][3] = t11 + t28;
        res[3][4] = (2.0/5.0)*t12 + (9.0/35.0)*t14;
        res[3][5] = (9.0/35.0)*t13 + (4.0/21.0)*t15;
        res[3][6] = t29;
        res[3][7] = t17;
        res[3][8] = t16 + (2.0/5.0)*t18;
        res[3][9] = (2.0/5.0)*t17 + (9.0/35.0)*t19;
        res[3][10] = (9.0/35.0)*t18 + (4.0/21.0)*t20;
        res[3][11] = t30;
        res[4][0] = 0;
        res[4][1] = -Q[4]*t21 - Q[9]*t1 - 4.0/21.0*t3 - 3.0/7.0*t31 - 2.0/7.0*t32 - 3.0/7.0*t33 - 2.0/7.0*t34 - 100.0/693.0*t5 - 2.0/3.0*t7 - 2.0/7.0*t9;
        res[4][2] = t13;
        res[4][3] = (3.0/7.0)*t14 + t35;
        res[4][4] = t11 + (2.0/7.0)*t15 + t36;
        res[4][5] = (3.0/7.0)*t12 + t29;
        res[4][6] = (100.0/693.0)*t15 + t36;
        res[4][7] = t18;
        res[4][8] = (2.0/3.0)*t17 + (3.0/7.0)*t19;
        res[4][9] = t16 + (2.0/7.0)*t20 + t37;
        res[4][10] = (3.0/7.0)*t17 + t30;
        res[4][11] = (100.0/693.0)*t20 + t37;
        res[5][0] = 0;
        res[5][1] = -Q[10]*t1 - 4.0/9.0*Q[11]*t6 - Q[5]*t21 - 4.0/9.0*Q[8]*t4 - 4.0/15.0*t22 - 2.0/11.0*t23 - 2.0/11.0*t24 - 3.0/5.0*t25 - 3.0/5.0*t26 - 4.0/15.0*t27;
        res[5][2] = t14;
        res[5][3] = (3.0/5.0)*t13 + (4.0/9.0)*t15;
        res[5][4] = (3.0/5.0)*t12 + (4.0/15.0)*t14;
        res[5][5] = t11 + (4.0/15.0)*t13 + (2.0/11.0)*t15;
        res[5][6] = (4.0/9.0)*t12 + (2.0/11.0)*t14;
        res[5][7] = t19;
        res[5][8] = (3.0/5.0)*t18 + (4.0/9.0)*t20;
        res[5][9] = (3.0/5.0)*t17 + (4.0/15.0)*t19;
        res[5][10] = t16 + (4.0/15.0)*t18 + (2.0/11.0)*t20;
        res[5][11] = (4.0/9.0)*t17 + (2.0/11.0)*t19;
        res[6][0] = 0;
        res[6][1] = -Q[11]*t1 - Q[6]*t21 - 18.0/77.0*t3 - 4.0/7.0*t31 - 20.0/77.0*t32 - 4.0/7.0*t33 - 20.0/77.0*t34 - 162.0/1001.0*t5 - 18.0/35.0*t9;
        res[6][2] = t15;
        res[6][3] = (4.0/7.0)*t14;
        res[6][4] = (20.0/77.0)*t15 + t38;
        res[6][5] = (4.0/7.0)*t12 + (18.0/77.0)*t14;
        res[6][6] = t11 + (20.0/77.0)*t13 + (162.0/1001.0)*t15;
        res[6][7] = t20;
        res[6][8] = (4.0/7.0)*t19;
        res[6][9] = (18.0/35.0)*t18 + (20.0/77.0)*t20;
        res[6][10] = (4.0/7.0)*t17 + (18.0/77.0)*t19;
        res[6][11] = t16 + (20.0/77.0)*t18 + (162.0/1001.0)*t20;
        res[7][0] = 0;
        res[7][1] = 1.0*9.81*Q[1] - Foam::pow(Q[7], 2)*t0 - 1.0/7.0*t39 - 1.0/9.0*t40 - 1.0/3.0*t41 - 1.0/5.0*t42;
        res[7][2] = 0;
        res[7][3] = 0;
        res[7][4] = 0;
        res[7][5] = 0;
        res[7][6] = 0;
        res[7][7] = t43;
        res[7][8] = t35;
        res[7][9] = t28;
        res[7][10] = (2.0/7.0)*t14;
        res[7][11] = (2.0/9.0)*t15;
        res[8][0] = 0;
        res[8][1] = -Q[8]*t47 - 8.0/21.0*t45 - 18.0/35.0*t46 - 4.0/5.0*t49;
        res[8][2] = 0;
        res[8][3] = 0;
        res[8][4] = 0;
        res[8][5] = 0;
        res[8][6] = 0;
        res[8][7] = 2*t12;
        res[8][8] = (4.0/5.0)*t13 + t43;
        res[8][9] = (4.0/5.0)*t12 + (18.0/35.0)*t14;
        res[8][10] = (8.0/21.0)*t15 + t38;
        res[8][11] = t50;
        res[9][0] = 0;
        res[9][1] = -Q[9]*t47 - 4.0/21.0*t39 - 100.0/693.0*t40 - 2.0/3.0*t41 - 2.0/7.0*t42 - 6.0/7.0*t51 - 4.0/7.0*t52;
        res[9][2] = 0;
        res[9][3] = 0;
        res[9][4] = 0;
        res[9][5] = 0;
        res[9][6] = 0;
        res[9][7] = 2*t13;
        res[9][8] = (4.0/3.0)*t12 + (6.0/7.0)*t14;
        res[9][9] = (4.0/7.0)*t15 + t43 + t53;
        res[9][10] = (6.0/7.0)*t12 + t50;
        res[9][11] = (200.0/693.0)*t15 + t53;
        res[10][0] = 0;
        res[10][1] = -Q[10]*t47 - 8.0/9.0*Q[11]*Q[8]*t0 - 4.0/11.0*t45 - 8.0/15.0*t46 - 6.0/5.0*t49;
        res[10][2] = 0;
        res[10][3] = 0;
        res[10][4] = 0;
        res[10][5] = 0;
        res[10][6] = 0;
        res[10][7] = 2*t14;
        res[10][8] = (6.0/5.0)*t13 + (8.0/9.0)*t15;
        res[10][9] = (6.0/5.0)*t12 + (8.0/15.0)*t14;
        res[10][10] = (8.0/15.0)*t13 + (4.0/11.0)*t15 + t43;
        res[10][11] = (8.0/9.0)*t12 + (4.0/11.0)*t14;
        res[11][0] = 0;
        res[11][1] = -Q[11]*t47 - 18.0/77.0*t39 - 162.0/1001.0*t40 - 18.0/35.0*t42 - 8.0/7.0*t51 - 40.0/77.0*t52;
        res[11][2] = 0;
        res[11][3] = 0;
        res[11][4] = 0;
        res[11][5] = 0;
        res[11][6] = 0;
        res[11][7] = 2*t15;
        res[11][8] = (8.0/7.0)*t14;
        res[11][9] = (36.0/35.0)*t13 + (40.0/77.0)*t15;
        res[11][10] = (8.0/7.0)*t12 + (36.0/77.0)*t14;
        res[11][11] = (40.0/77.0)*t13 + (324.0/1001.0)*t15 + t43;
    return res;
}
        

inline Foam::List<Foam::List<Foam::scalar>> nonconservative_matrix_x(
    const Foam::List<Foam::scalar>& Q,
    const Foam::List<Foam::scalar>& Qaux)
{
    auto res = Foam::List<Foam::List<Foam::scalar>>(12, Foam::List<Foam::scalar>(12, 0.0));
    Foam::scalar t0 = (1.0 / Foam::pow(Q[1], 1));
        Foam::scalar t1 = Q[2]*t0;
        Foam::scalar t2 = (2.0/5.0)*t0;
        Foam::scalar t3 = (6.0/35.0)*t0;
        Foam::scalar t4 = (2.0/21.0)*t0;
        Foam::scalar t5 = Q[5]*t4;
        Foam::scalar t6 = Q[3]*t0;
        Foam::scalar t7 = Q[5]*t0;
        Foam::scalar t8 = (2.0/7.0)*t0;
        Foam::scalar t9 = Q[4]*t0;
        Foam::scalar t10 = Q[6]*t0;
        Foam::scalar t11 = Q[7]*t0;
        Foam::scalar t12 = Q[9]*t0;
        Foam::scalar t13 = Q[10]*t0;
        Foam::scalar t14 = Q[11]*t0;
        Foam::scalar t15 = (1.0/21.0)*t13;
        Foam::scalar t16 = Q[8]*t0;
        res[0][0] = 0;
        res[0][1] = 0;
        res[0][2] = 0;
        res[0][3] = 0;
        res[0][4] = 0;
        res[0][5] = 0;
        res[0][6] = 0;
        res[0][7] = 0;
        res[0][8] = 0;
        res[0][9] = 0;
        res[0][10] = 0;
        res[0][11] = 0;
        res[1][0] = 0;
        res[1][1] = 0;
        res[1][2] = 0;
        res[1][3] = 0;
        res[1][4] = 0;
        res[1][5] = 0;
        res[1][6] = 0;
        res[1][7] = 0;
        res[1][8] = 0;
        res[1][9] = 0;
        res[1][10] = 0;
        res[1][11] = 0;
        res[2][0] = 0;
        res[2][1] = 0;
        res[2][2] = 0;
        res[2][3] = 0;
        res[2][4] = 0;
        res[2][5] = 0;
        res[2][6] = 0;
        res[2][7] = 0;
        res[2][8] = 0;
        res[2][9] = 0;
        res[2][10] = 0;
        res[2][11] = 0;
        res[3][0] = 0;
        res[3][1] = 0;
        res[3][2] = 0;
        res[3][3] = -Q[4]*t2 - t1;
        res[3][4] = Q[3]*t2 - Q[5]*t3;
        res[3][5] = Q[4]*t3 - Q[6]*t4;
        res[3][6] = t5;
        res[3][7] = 0;
        res[3][8] = 0;
        res[3][9] = 0;
        res[3][10] = 0;
        res[3][11] = 0;
        res[4][0] = 0;
        res[4][1] = 0;
        res[4][2] = 0;
        res[4][3] = -2*t6 - 4.0/7.0*t7;
        res[4][4] = -Q[4]*t8 - Q[6]*t8 - t1;
        res[4][5] = -t5 + (6.0/7.0)*t6;
        res[4][6] = -10.0/231.0*t10 + (8.0/21.0)*t9;
        res[4][7] = 0;
        res[4][8] = 0;
        res[4][9] = 0;
        res[4][10] = 0;
        res[4][11] = 0;
        res[5][0] = 0;
        res[5][1] = 0;
        res[5][2] = 0;
        res[5][3] = -2.0/3.0*t10 - 8.0/5.0*t9;
        res[5][4] = -Q[5]*t2 - 12.0/5.0*t6;
        res[5][5] = -t1 - 2.0/11.0*t10 - 4.0/15.0*t9;
        res[5][6] = (4.0/3.0)*t6 - 2.0/33.0*t7;
        res[5][7] = 0;
        res[5][8] = 0;
        res[5][9] = 0;
        res[5][10] = 0;
        res[5][11] = 0;
        res[6][0] = 0;
        res[6][1] = 0;
        res[6][2] = 0;
        res[6][3] = -10.0/7.0*t7;
        res[6][4] = -34.0/77.0*t10 - 12.0/7.0*t9;
        res[6][5] = -20.0/7.0*t6 - 30.0/77.0*t7;
        res[6][6] = -t1 - 162.0/1001.0*t10 - 20.0/77.0*t9;
        res[6][7] = 0;
        res[6][8] = 0;
        res[6][9] = 0;
        res[6][10] = 0;
        res[6][11] = 0;
        res[7][0] = 0;
        res[7][1] = 0;
        res[7][2] = 0;
        res[7][3] = 0;
        res[7][4] = 0;
        res[7][5] = 0;
        res[7][6] = 0;
        res[7][7] = 0;
        res[7][8] = 0;
        res[7][9] = 0;
        res[7][10] = 0;
        res[7][11] = 0;
        res[8][0] = 0;
        res[8][1] = 0;
        res[8][2] = 0;
        res[8][3] = -t11 - 1.0/5.0*t12;
        res[8][4] = (1.0/5.0)*Q[8]*t0 - 3.0/35.0*t13;
        res[8][5] = (3.0/35.0)*Q[9]*t0 - 1.0/21.0*t14;
        res[8][6] = t15;
        res[8][7] = 0;
        res[8][8] = 0;
        res[8][9] = 0;
        res[8][10] = 0;
        res[8][11] = 0;
        res[9][0] = 0;
        res[9][1] = 0;
        res[9][2] = 0;
        res[9][3] = -Q[10]*t8 - t16;
        res[9][4] = -t11 - 1.0/7.0*t12 - 1.0/7.0*t14;
        res[9][5] = (3.0/7.0)*Q[8]*t0 - t15;
        res[9][6] = (4.0/21.0)*Q[9]*t0 - 5.0/231.0*t14;
        res[9][7] = 0;
        res[9][8] = 0;
        res[9][9] = 0;
        res[9][10] = 0;
        res[9][11] = 0;
        res[10][0] = 0;
        res[10][1] = 0;
        res[10][2] = 0;
        res[10][3] = -4.0/5.0*t12 - 1.0/3.0*t14;
        res[10][4] = -1.0/5.0*t13 - 6.0/5.0*t16;
        res[10][5] = -t11 - 2.0/15.0*t12 - 1.0/11.0*t14;
        res[10][6] = (2.0/3.0)*Q[8]*t0 - 1.0/33.0*t13;
        res[10][7] = 0;
        res[10][8] = 0;
        res[10][9] = 0;
        res[10][10] = 0;
        res[10][11] = 0;
        res[11][0] = 0;
        res[11][1] = 0;
        res[11][2] = 0;
        res[11][3] = -5.0/7.0*t13;
        res[11][4] = -6.0/7.0*t12 - 17.0/77.0*t14;
        res[11][5] = -15.0/77.0*t13 - 10.0/7.0*t16;
        res[11][6] = -t11 - 10.0/77.0*t12 - 81.0/1001.0*t14;
        res[11][7] = 0;
        res[11][8] = 0;
        res[11][9] = 0;
        res[11][10] = 0;
        res[11][11] = 0;
    return res;
}
        

inline Foam::List<Foam::List<Foam::scalar>> nonconservative_matrix_y(
    const Foam::List<Foam::scalar>& Q,
    const Foam::List<Foam::scalar>& Qaux)
{
    auto res = Foam::List<Foam::List<Foam::scalar>>(12, Foam::List<Foam::scalar>(12, 0.0));
    Foam::scalar t0 = (1.0 / Foam::pow(Q[1], 1));
        Foam::scalar t1 = Q[2]*t0;
        Foam::scalar t2 = Q[4]*t0;
        Foam::scalar t3 = Q[3]*t0;
        Foam::scalar t4 = Q[5]*t0;
        Foam::scalar t5 = Q[6]*t0;
        Foam::scalar t6 = (1.0/21.0)*t4;
        Foam::scalar t7 = Q[7]*t0;
        Foam::scalar t8 = Q[9]*t0;
        Foam::scalar t9 = Q[10]*t0;
        Foam::scalar t10 = Q[11]*t0;
        Foam::scalar t11 = (1.0/21.0)*t9;
        Foam::scalar t12 = Q[8]*t0;
        res[0][0] = 0;
        res[0][1] = 0;
        res[0][2] = 0;
        res[0][3] = 0;
        res[0][4] = 0;
        res[0][5] = 0;
        res[0][6] = 0;
        res[0][7] = 0;
        res[0][8] = 0;
        res[0][9] = 0;
        res[0][10] = 0;
        res[0][11] = 0;
        res[1][0] = 0;
        res[1][1] = 0;
        res[1][2] = 0;
        res[1][3] = 0;
        res[1][4] = 0;
        res[1][5] = 0;
        res[1][6] = 0;
        res[1][7] = 0;
        res[1][8] = 0;
        res[1][9] = 0;
        res[1][10] = 0;
        res[1][11] = 0;
        res[2][0] = 0;
        res[2][1] = 0;
        res[2][2] = 0;
        res[2][3] = 0;
        res[2][4] = 0;
        res[2][5] = 0;
        res[2][6] = 0;
        res[2][7] = 0;
        res[2][8] = 0;
        res[2][9] = 0;
        res[2][10] = 0;
        res[2][11] = 0;
        res[3][0] = 0;
        res[3][1] = 0;
        res[3][2] = 0;
        res[3][3] = 0;
        res[3][4] = 0;
        res[3][5] = 0;
        res[3][6] = 0;
        res[3][7] = 0;
        res[3][8] = -t1 - 1.0/5.0*t2;
        res[3][9] = (1.0/5.0)*t3 - 3.0/35.0*t4;
        res[3][10] = (3.0/35.0)*t2 - 1.0/21.0*t5;
        res[3][11] = t6;
        res[4][0] = 0;
        res[4][1] = 0;
        res[4][2] = 0;
        res[4][3] = 0;
        res[4][4] = 0;
        res[4][5] = 0;
        res[4][6] = 0;
        res[4][7] = 0;
        res[4][8] = -t3 - 2.0/7.0*t4;
        res[4][9] = -t1 - 1.0/7.0*t2 - 1.0/7.0*t5;
        res[4][10] = (3.0/7.0)*t3 - t6;
        res[4][11] = (4.0/21.0)*t2 - 5.0/231.0*t5;
        res[5][0] = 0;
        res[5][1] = 0;
        res[5][2] = 0;
        res[5][3] = 0;
        res[5][4] = 0;
        res[5][5] = 0;
        res[5][6] = 0;
        res[5][7] = 0;
        res[5][8] = -4.0/5.0*t2 - 1.0/3.0*t5;
        res[5][9] = -6.0/5.0*t3 - 1.0/5.0*t4;
        res[5][10] = -t1 - 2.0/15.0*t2 - 1.0/11.0*t5;
        res[5][11] = (2.0/3.0)*t3 - 1.0/33.0*t4;
        res[6][0] = 0;
        res[6][1] = 0;
        res[6][2] = 0;
        res[6][3] = 0;
        res[6][4] = 0;
        res[6][5] = 0;
        res[6][6] = 0;
        res[6][7] = 0;
        res[6][8] = -5.0/7.0*t4;
        res[6][9] = -6.0/7.0*t2 - 17.0/77.0*t5;
        res[6][10] = -10.0/7.0*t3 - 15.0/77.0*t4;
        res[6][11] = -t1 - 10.0/77.0*t2 - 81.0/1001.0*t5;
        res[7][0] = 0;
        res[7][1] = 0;
        res[7][2] = 0;
        res[7][3] = 0;
        res[7][4] = 0;
        res[7][5] = 0;
        res[7][6] = 0;
        res[7][7] = 0;
        res[7][8] = 0;
        res[7][9] = 0;
        res[7][10] = 0;
        res[7][11] = 0;
        res[8][0] = 0;
        res[8][1] = 0;
        res[8][2] = 0;
        res[8][3] = 0;
        res[8][4] = 0;
        res[8][5] = 0;
        res[8][6] = 0;
        res[8][7] = 0;
        res[8][8] = -t7 - 1.0/5.0*t8;
        res[8][9] = (1.0/5.0)*Q[8]*t0 - 3.0/35.0*t9;
        res[8][10] = (3.0/35.0)*Q[9]*t0 - 1.0/21.0*t10;
        res[8][11] = t11;
        res[9][0] = 0;
        res[9][1] = 0;
        res[9][2] = 0;
        res[9][3] = 0;
        res[9][4] = 0;
        res[9][5] = 0;
        res[9][6] = 0;
        res[9][7] = 0;
        res[9][8] = -t12 - 2.0/7.0*t9;
        res[9][9] = -1.0/7.0*t10 - t7 - 1.0/7.0*t8;
        res[9][10] = (3.0/7.0)*Q[8]*t0 - t11;
        res[9][11] = (4.0/21.0)*Q[9]*t0 - 5.0/231.0*t10;
        res[10][0] = 0;
        res[10][1] = 0;
        res[10][2] = 0;
        res[10][3] = 0;
        res[10][4] = 0;
        res[10][5] = 0;
        res[10][6] = 0;
        res[10][7] = 0;
        res[10][8] = -1.0/3.0*t10 - 4.0/5.0*t8;
        res[10][9] = -6.0/5.0*t12 - 1.0/5.0*t9;
        res[10][10] = -1.0/11.0*t10 - t7 - 2.0/15.0*t8;
        res[10][11] = (2.0/3.0)*Q[8]*t0 - 1.0/33.0*t9;
        res[11][0] = 0;
        res[11][1] = 0;
        res[11][2] = 0;
        res[11][3] = 0;
        res[11][4] = 0;
        res[11][5] = 0;
        res[11][6] = 0;
        res[11][7] = 0;
        res[11][8] = -5.0/7.0*t9;
        res[11][9] = -17.0/77.0*t10 - 6.0/7.0*t8;
        res[11][10] = -10.0/7.0*t12 - 15.0/77.0*t9;
        res[11][11] = -81.0/1001.0*t10 - t7 - 10.0/77.0*t8;
    return res;
}
        

inline Foam::List<Foam::List<Foam::scalar>> quasilinear_matrix_x(
    const Foam::List<Foam::scalar>& Q,
    const Foam::List<Foam::scalar>& Qaux)
{
    auto res = Foam::List<Foam::List<Foam::scalar>>(12, Foam::List<Foam::scalar>(12, 0.0));
    Foam::scalar t0 = (1.0 / Foam::pow(Q[1], 2));
        Foam::scalar t1 = Foam::pow(Q[3], 2)*t0;
        Foam::scalar t2 = Foam::pow(Q[4], 2)*t0;
        Foam::scalar t3 = Foam::pow(Q[5], 2)*t0;
        Foam::scalar t4 = Foam::pow(Q[6], 2)*t0;
        Foam::scalar t5 = (1.0 / Foam::pow(Q[1], 1));
        Foam::scalar t6 = Q[2]*t5;
        Foam::scalar t7 = Q[3]*t5;
        Foam::scalar t8 = (2.0/3.0)*t7;
        Foam::scalar t9 = Q[4]*t5;
        Foam::scalar t10 = (2.0/5.0)*t9;
        Foam::scalar t11 = Q[5]*t5;
        Foam::scalar t12 = (2.0/7.0)*t11;
        Foam::scalar t13 = Q[6]*t5;
        Foam::scalar t14 = Q[2]*t0;
        Foam::scalar t15 = 2*t14;
        Foam::scalar t16 = Q[4]*t0;
        Foam::scalar t17 = Q[3]*t16;
        Foam::scalar t18 = Q[5]*t0;
        Foam::scalar t19 = Q[4]*t18;
        Foam::scalar t20 = Q[6]*t18;
        Foam::scalar t21 = t10 + t6;
        Foam::scalar t22 = (6.0/5.0)*t7;
        Foam::scalar t23 = (24.0/35.0)*t9;
        Foam::scalar t24 = (2.0/7.0)*t13;
        Foam::scalar t25 = Q[3]*t18;
        Foam::scalar t26 = Q[6]*t16;
        Foam::scalar t27 = -t12;
        Foam::scalar t28 = (2.0/7.0)*t9;
        Foam::scalar t29 = t24 + t28 + t6;
        Foam::scalar t30 = (12.0/7.0)*t7;
        Foam::scalar t31 = Q[3]*t0;
        Foam::scalar t32 = (2.0/11.0)*t13 + t6 + (4.0/15.0)*t9;
        Foam::scalar t33 = (162.0/1001.0)*t13 + t6 + (20.0/77.0)*t9;
        Foam::scalar t34 = Q[10]*t18;
        Foam::scalar t35 = Q[6]*t0;
        Foam::scalar t36 = Q[11]*t35;
        Foam::scalar t37 = Q[8]*t31;
        Foam::scalar t38 = Q[9]*t16;
        Foam::scalar t39 = Q[8]*t5;
        Foam::scalar t40 = (1.0/3.0)*t39;
        Foam::scalar t41 = Q[9]*t5;
        Foam::scalar t42 = (1.0/5.0)*t41;
        Foam::scalar t43 = Q[10]*t5;
        Foam::scalar t44 = (1.0/7.0)*t43;
        Foam::scalar t45 = Q[11]*t5;
        Foam::scalar t46 = (1.0/9.0)*t45;
        Foam::scalar t47 = Q[7]*t0;
        Foam::scalar t48 = Q[10]*t16;
        Foam::scalar t49 = Q[10]*t35;
        Foam::scalar t50 = Q[11]*t18;
        Foam::scalar t51 = Q[9]*t31;
        Foam::scalar t52 = Q[8]*t16;
        Foam::scalar t53 = Q[9]*t18;
        Foam::scalar t54 = (3.0/5.0)*t39;
        Foam::scalar t55 = (1.0/7.0)*t45;
        Foam::scalar t56 = (12.0/35.0)*t41;
        Foam::scalar t57 = (4.0/21.0)*t11;
        Foam::scalar t58 = Q[10]*t31;
        Foam::scalar t59 = Q[11]*t16;
        Foam::scalar t60 = Q[8]*t18;
        Foam::scalar t61 = Q[9]*t35;
        Foam::scalar t62 = (6.0/7.0)*t39;
        res[0][0] = 0;
        res[0][1] = 0;
        res[0][2] = 0;
        res[0][3] = 0;
        res[0][4] = 0;
        res[0][5] = 0;
        res[0][6] = 0;
        res[0][7] = 0;
        res[0][8] = 0;
        res[0][9] = 0;
        res[0][10] = 0;
        res[0][11] = 0;
        res[1][0] = 0;
        res[1][1] = 0;
        res[1][2] = 1;
        res[1][3] = 0;
        res[1][4] = 0;
        res[1][5] = 0;
        res[1][6] = 0;
        res[1][7] = 0;
        res[1][8] = 0;
        res[1][9] = 0;
        res[1][10] = 0;
        res[1][11] = 0;
        res[2][0] = 0;
        res[2][1] = 1.0*9.81*Q[1] - Foam::pow(Q[2], 2)*t0 - 1.0/3.0*t1 - 1.0/5.0*t2 - 1.0/7.0*t3 - 1.0/9.0*t4;
        res[2][2] = 2*t6;
        res[2][3] = t8;
        res[2][4] = t10;
        res[2][5] = t12;
        res[2][6] = (2.0/9.0)*t13;
        res[2][7] = 0;
        res[2][8] = 0;
        res[2][9] = 0;
        res[2][10] = 0;
        res[2][11] = 0;
        res[3][0] = 0;
        res[3][1] = -Q[3]*t15 - 4.0/5.0*t17 - 18.0/35.0*t19 - 8.0/21.0*t20;
        res[3][2] = 2*t7;
        res[3][3] = t21;
        res[3][4] = (12.0/35.0)*t11 + t22;
        res[3][5] = t23 + t24;
        res[3][6] = (10.0/21.0)*t11;
        res[3][7] = 0;
        res[3][8] = 0;
        res[3][9] = 0;
        res[3][10] = 0;
        res[3][11] = 0;
        res[4][0] = 0;
        res[4][1] = -Q[4]*t15 - 2.0/3.0*t1 - 2.0/7.0*t2 - 6.0/7.0*t25 - 4.0/7.0*t26 - 4.0/21.0*t3 - 100.0/693.0*t4;
        res[4][2] = 2*t9;
        res[4][3] = -t27 - t8;
        res[4][4] = t29;
        res[4][5] = t12 + t30;
        res[4][6] = (170.0/693.0)*t13 + (20.0/21.0)*t9;
        res[4][7] = 0;
        res[4][8] = 0;
        res[4][9] = 0;
        res[4][10] = 0;
        res[4][11] = 0;
        res[5][0] = 0;
        res[5][1] = -Q[5]*t15 - 8.0/9.0*Q[6]*t31 - 6.0/5.0*t17 - 8.0/15.0*t19 - 4.0/11.0*t20;
        res[5][2] = 2*t11;
        res[5][3] = (2.0/9.0)*Q[6]*t5 - t10;
        res[5][4] = (2.0/15.0)*Q[5]*t5 - t22;
        res[5][5] = t32;
        res[5][6] = (10.0/33.0)*t11 + (20.0/9.0)*t7;
        res[5][7] = 0;
        res[5][8] = 0;
        res[5][9] = 0;
        res[5][10] = 0;
        res[5][11] = 0;
        res[6][0] = 0;
        res[6][1] = -Q[6]*t15 - 18.0/35.0*t2 - 8.0/7.0*t25 - 40.0/77.0*t26 - 18.0/77.0*t3 - 162.0/1001.0*t4;
        res[6][2] = 2*t13;
        res[6][3] = t27;
        res[6][4] = (6.0/77.0)*Q[6]*t5 - t23;
        res[6][5] = (6.0/77.0)*Q[5]*t5 - t30;
        res[6][6] = t33;
        res[6][7] = 0;
        res[6][8] = 0;
        res[6][9] = 0;
        res[6][10] = 0;
        res[6][11] = 0;
        res[7][0] = 0;
        res[7][1] = -Q[7]*t14 - 1.0/7.0*t34 - 1.0/9.0*t36 - 1.0/3.0*t37 - 1.0/5.0*t38;
        res[7][2] = Q[7]*t5;
        res[7][3] = t40;
        res[7][4] = t42;
        res[7][5] = t44;
        res[7][6] = t46;
        res[7][7] = t6;
        res[7][8] = (1.0/3.0)*t7;
        res[7][9] = (1.0/5.0)*t9;
        res[7][10] = (1.0/7.0)*t11;
        res[7][11] = (1.0/9.0)*t13;
        res[8][0] = 0;
        res[8][1] = -Q[3]*t47 - Q[8]*t14 - 9.0/35.0*t48 - 4.0/21.0*t49 - 4.0/21.0*t50 - 2.0/5.0*t51 - 2.0/5.0*t52 - 9.0/35.0*t53;
        res[8][2] = t39;
        res[8][3] = t42;
        res[8][4] = (6.0/35.0)*t43 + t54;
        res[8][5] = t55 + t56;
        res[8][6] = (5.0/21.0)*t43;
        res[8][7] = t7;
        res[8][8] = t21;
        res[8][9] = (9.0/35.0)*t11 + (2.0/5.0)*t7;
        res[8][10] = (4.0/21.0)*t13 + (9.0/35.0)*t9;
        res[8][11] = t57;
        res[9][0] = 0;
        res[9][1] = -Q[4]*t47 - Q[9]*t14 - 4.0/21.0*t34 - 100.0/693.0*t36 - 2.0/3.0*t37 - 2.0/7.0*t38 - 3.0/7.0*t58 - 2.0/7.0*t59 - 3.0/7.0*t60 - 2.0/7.0*t61;
        res[9][2] = t41;
        res[9][3] = -t40 + t44;
        res[9][4] = (1.0/7.0)*t41 + t55;
        res[9][5] = t44 + t62;
        res[9][6] = (10.0/21.0)*t41 + (85.0/693.0)*t45;
        res[9][7] = t9;
        res[9][8] = (3.0/7.0)*t11 + t8;
        res[9][9] = t29;
        res[9][10] = t57 + (3.0/7.0)*t7;
        res[9][11] = (100.0/693.0)*t13 + t28;
        res[10][0] = 0;
        res[10][1] = -Q[10]*t14 - 4.0/9.0*Q[11]*t31 - Q[5]*t47 - 4.0/9.0*Q[8]*t35 - 4.0/15.0*t48 - 2.0/11.0*t49 - 2.0/11.0*t50 - 3.0/5.0*t51 - 3.0/5.0*t52 - 4.0/15.0*t53;
        res[10][2] = t43;
        res[10][3] = -t42 + t46;
        res[10][4] = (1.0/15.0)*t43 - t54;
        res[10][5] = (2.0/15.0)*t41 + (1.0/11.0)*t45;
        res[10][6] = (10.0/9.0)*t39 + (5.0/33.0)*t43;
        res[10][7] = t11;
        res[10][8] = (4.0/9.0)*t13 + (3.0/5.0)*t9;
        res[10][9] = (4.0/15.0)*t11 + (3.0/5.0)*t7;
        res[10][10] = t32;
        res[10][11] = (2.0/11.0)*t11 + (4.0/9.0)*t7;
        res[11][0] = 0;
        res[11][1] = -Q[11]*t14 - Q[6]*t47 - 18.0/77.0*t34 - 162.0/1001.0*t36 - 18.0/35.0*t38 - 4.0/7.0*t58 - 20.0/77.0*t59 - 4.0/7.0*t60 - 20.0/77.0*t61;
        res[11][2] = t45;
        res[11][3] = -t44;
        res[11][4] = (3.0/77.0)*t45 - t56;
        res[11][5] = (3.0/77.0)*t43 - t62;
        res[11][6] = (10.0/77.0)*t41 + (81.0/1001.0)*t45;
        res[11][7] = t13;
        res[11][8] = (4.0/7.0)*t11;
        res[11][9] = (20.0/77.0)*t13 + (18.0/35.0)*t9;
        res[11][10] = (18.0/77.0)*t11 + (4.0/7.0)*t7;
        res[11][11] = t33;
    return res;
}
        

inline Foam::List<Foam::List<Foam::scalar>> quasilinear_matrix_y(
    const Foam::List<Foam::scalar>& Q,
    const Foam::List<Foam::scalar>& Qaux)
{
    auto res = Foam::List<Foam::List<Foam::scalar>>(12, Foam::List<Foam::scalar>(12, 0.0));
    Foam::scalar t0 = (1.0 / Foam::pow(Q[1], 2));
        Foam::scalar t1 = Q[2]*t0;
        Foam::scalar t2 = Q[5]*t0;
        Foam::scalar t3 = Q[10]*t2;
        Foam::scalar t4 = Q[6]*t0;
        Foam::scalar t5 = Q[11]*t4;
        Foam::scalar t6 = Q[3]*t0;
        Foam::scalar t7 = Q[8]*t6;
        Foam::scalar t8 = Q[4]*t0;
        Foam::scalar t9 = Q[9]*t8;
        Foam::scalar t10 = (1.0 / Foam::pow(Q[1], 1));
        Foam::scalar t11 = Q[7]*t10;
        Foam::scalar t12 = Q[8]*t10;
        Foam::scalar t13 = (1.0/3.0)*t12;
        Foam::scalar t14 = Q[9]*t10;
        Foam::scalar t15 = Q[10]*t10;
        Foam::scalar t16 = Q[11]*t10;
        Foam::scalar t17 = Q[3]*t10;
        Foam::scalar t18 = (1.0/3.0)*t17;
        Foam::scalar t19 = Q[4]*t10;
        Foam::scalar t20 = (1.0/5.0)*t19;
        Foam::scalar t21 = Q[5]*t10;
        Foam::scalar t22 = (1.0/7.0)*t21;
        Foam::scalar t23 = Q[6]*t10;
        Foam::scalar t24 = Q[7]*t0;
        Foam::scalar t25 = Q[10]*t8;
        Foam::scalar t26 = Q[10]*t4;
        Foam::scalar t27 = Q[11]*t2;
        Foam::scalar t28 = Q[9]*t6;
        Foam::scalar t29 = Q[8]*t8;
        Foam::scalar t30 = Q[9]*t2;
        Foam::scalar t31 = (2.0/5.0)*t14;
        Foam::scalar t32 = t11 + t31;
        Foam::scalar t33 = (4.0/21.0)*t15;
        Foam::scalar t34 = (3.0/5.0)*t17;
        Foam::scalar t35 = (12.0/35.0)*t19;
        Foam::scalar t36 = (1.0/7.0)*t23;
        Foam::scalar t37 = Q[10]*t6;
        Foam::scalar t38 = Q[11]*t8;
        Foam::scalar t39 = Q[8]*t2;
        Foam::scalar t40 = Q[9]*t4;
        Foam::scalar t41 = (3.0/7.0)*t15;
        Foam::scalar t42 = (2.0/3.0)*t12;
        Foam::scalar t43 = (2.0/7.0)*t14;
        Foam::scalar t44 = -t22;
        Foam::scalar t45 = (6.0/7.0)*t17;
        Foam::scalar t46 = (3.0/5.0)*t14;
        Foam::scalar t47 = (4.0/7.0)*t15;
        Foam::scalar t48 = Foam::pow(Q[10], 2)*t0;
        Foam::scalar t49 = Foam::pow(Q[11], 2)*t0;
        Foam::scalar t50 = Foam::pow(Q[8], 2)*t0;
        Foam::scalar t51 = Foam::pow(Q[9], 2)*t0;
        Foam::scalar t52 = Q[10]*t0;
        Foam::scalar t53 = Q[11]*t52;
        Foam::scalar t54 = Q[9]*t52;
        Foam::scalar t55 = 2*t24;
        Foam::scalar t56 = Q[9]*t0;
        Foam::scalar t57 = Q[8]*t56;
        Foam::scalar t58 = Q[8]*t52;
        Foam::scalar t59 = Q[11]*t56;
        Foam::scalar t60 = (1.0/3.0)*t15;
        res[0][0] = 0;
        res[0][1] = 0;
        res[0][2] = 0;
        res[0][3] = 0;
        res[0][4] = 0;
        res[0][5] = 0;
        res[0][6] = 0;
        res[0][7] = 0;
        res[0][8] = 0;
        res[0][9] = 0;
        res[0][10] = 0;
        res[0][11] = 0;
        res[1][0] = 0;
        res[1][1] = 0;
        res[1][2] = 0;
        res[1][3] = 0;
        res[1][4] = 0;
        res[1][5] = 0;
        res[1][6] = 0;
        res[1][7] = 1;
        res[1][8] = 0;
        res[1][9] = 0;
        res[1][10] = 0;
        res[1][11] = 0;
        res[2][0] = 0;
        res[2][1] = -Q[7]*t1 - 1.0/7.0*t3 - 1.0/9.0*t5 - 1.0/3.0*t7 - 1.0/5.0*t9;
        res[2][2] = t11;
        res[2][3] = t13;
        res[2][4] = (1.0/5.0)*t14;
        res[2][5] = (1.0/7.0)*t15;
        res[2][6] = (1.0/9.0)*t16;
        res[2][7] = Q[2]*t10;
        res[2][8] = t18;
        res[2][9] = t20;
        res[2][10] = t22;
        res[2][11] = (1.0/9.0)*t23;
        res[3][0] = 0;
        res[3][1] = -Q[3]*t24 - Q[8]*t1 - 9.0/35.0*t25 - 4.0/21.0*t26 - 4.0/21.0*t27 - 2.0/5.0*t28 - 2.0/5.0*t29 - 9.0/35.0*t30;
        res[3][2] = t12;
        res[3][3] = t32;
        res[3][4] = (2.0/5.0)*t12 + (9.0/35.0)*t15;
        res[3][5] = (9.0/35.0)*t14 + (4.0/21.0)*t16;
        res[3][6] = t33;
        res[3][7] = t17;
        res[3][8] = t20;
        res[3][9] = (6.0/35.0)*t21 + t34;
        res[3][10] = t35 + t36;
        res[3][11] = (5.0/21.0)*t21;
        res[4][0] = 0;
        res[4][1] = -Q[4]*t24 - Q[9]*t1 - 4.0/21.0*t3 - 3.0/7.0*t37 - 2.0/7.0*t38 - 3.0/7.0*t39 - 2.0/7.0*t40 - 100.0/693.0*t5 - 2.0/3.0*t7 - 2.0/7.0*t9;
        res[4][2] = t14;
        res[4][3] = t41 + t42;
        res[4][4] = t11 + (2.0/7.0)*t16 + t43;
        res[4][5] = (3.0/7.0)*t12 + t33;
        res[4][6] = (100.0/693.0)*t16 + t43;
        res[4][7] = t19;
        res[4][8] = -t18 - t44;
        res[4][9] = (1.0/7.0)*t19 + t36;
        res[4][10] = t22 + t45;
        res[4][11] = (10.0/21.0)*t19 + (85.0/693.0)*t23;
        res[5][0] = 0;
        res[5][1] = -Q[10]*t1 - 4.0/9.0*Q[11]*t6 - Q[5]*t24 - 4.0/9.0*Q[8]*t4 - 4.0/15.0*t25 - 2.0/11.0*t26 - 2.0/11.0*t27 - 3.0/5.0*t28 - 3.0/5.0*t29 - 4.0/15.0*t30;
        res[5][2] = t15;
        res[5][3] = (4.0/9.0)*t16 + t46;
        res[5][4] = (3.0/5.0)*t12 + (4.0/15.0)*t15;
        res[5][5] = t11 + (4.0/15.0)*t14 + (2.0/11.0)*t16;
        res[5][6] = (4.0/9.0)*t12 + (2.0/11.0)*t15;
        res[5][7] = t21;
        res[5][8] = (1.0/9.0)*Q[6]*t10 - t20;
        res[5][9] = (1.0/15.0)*Q[5]*t10 - t34;
        res[5][10] = (2.0/15.0)*t19 + (1.0/11.0)*t23;
        res[5][11] = (10.0/9.0)*t17 + (5.0/33.0)*t21;
        res[6][0] = 0;
        res[6][1] = -Q[11]*t1 - Q[6]*t24 - 18.0/77.0*t3 - 4.0/7.0*t37 - 20.0/77.0*t38 - 4.0/7.0*t39 - 20.0/77.0*t40 - 162.0/1001.0*t5 - 18.0/35.0*t9;
        res[6][2] = t16;
        res[6][3] = t47;
        res[6][4] = (18.0/35.0)*t14 + (20.0/77.0)*t16;
        res[6][5] = (4.0/7.0)*t12 + (18.0/77.0)*t15;
        res[6][6] = t11 + (20.0/77.0)*t14 + (162.0/1001.0)*t16;
        res[6][7] = t23;
        res[6][8] = t44;
        res[6][9] = (3.0/77.0)*Q[6]*t10 - t35;
        res[6][10] = (3.0/77.0)*Q[5]*t10 - t45;
        res[6][11] = (10.0/77.0)*t19 + (81.0/1001.0)*t23;
        res[7][0] = 0;
        res[7][1] = 1.0*9.81*Q[1] - Foam::pow(Q[7], 2)*t0 - 1.0/7.0*t48 - 1.0/9.0*t49 - 1.0/3.0*t50 - 1.0/5.0*t51;
        res[7][2] = 0;
        res[7][3] = 0;
        res[7][4] = 0;
        res[7][5] = 0;
        res[7][6] = 0;
        res[7][7] = 2*t11;
        res[7][8] = t42;
        res[7][9] = t31;
        res[7][10] = (2.0/7.0)*t15;
        res[7][11] = (2.0/9.0)*t16;
        res[8][0] = 0;
        res[8][1] = -Q[8]*t55 - 8.0/21.0*t53 - 18.0/35.0*t54 - 4.0/5.0*t57;
        res[8][2] = 0;
        res[8][3] = 0;
        res[8][4] = 0;
        res[8][5] = 0;
        res[8][6] = 0;
        res[8][7] = 2*t12;
        res[8][8] = t11 + t46;
        res[8][9] = t12 + t41;
        res[8][10] = (1.0/3.0)*t16 + t46;
        res[8][11] = t41;
        res[9][0] = 0;
        res[9][1] = -Q[9]*t55 - 4.0/21.0*t48 - 100.0/693.0*t49 - 2.0/3.0*t50 - 2.0/7.0*t51 - 6.0/7.0*t58 - 4.0/7.0*t59;
        res[9][2] = 0;
        res[9][3] = 0;
        res[9][4] = 0;
        res[9][5] = 0;
        res[9][6] = 0;
        res[9][7] = 2*t14;
        res[9][8] = t13 + t47;
        res[9][9] = t11 + (3.0/7.0)*t14 + (3.0/7.0)*t16;
        res[9][10] = (9.0/7.0)*t12 + t60;
        res[9][11] = (16.0/21.0)*t14 + (185.0/693.0)*t16;
        res[10][0] = 0;
        res[10][1] = -Q[10]*t55 - 8.0/9.0*Q[11]*Q[8]*t0 - 4.0/11.0*t53 - 8.0/15.0*t54 - 6.0/5.0*t57;
        res[10][2] = 0;
        res[10][3] = 0;
        res[10][4] = 0;
        res[10][5] = 0;
        res[10][6] = 0;
        res[10][7] = 2*t15;
        res[10][8] = (5.0/9.0)*t16 + t31;
        res[10][9] = t60;
        res[10][10] = (3.0/11.0)*t16 + t32;
        res[10][11] = (14.0/9.0)*t12 + t60;
        res[11][0] = 0;
        res[11][1] = -Q[11]*t55 - 18.0/77.0*t48 - 162.0/1001.0*t49 - 18.0/35.0*t51 - 8.0/7.0*t58 - 40.0/77.0*t59;
        res[11][2] = 0;
        res[11][3] = 0;
        res[11][4] = 0;
        res[11][5] = 0;
        res[11][6] = 0;
        res[11][7] = 2*t16;
        res[11][8] = t41;
        res[11][9] = (6.0/35.0)*t14 + (23.0/77.0)*t16;
        res[11][10] = -2.0/7.0*t12 + (3.0/11.0)*t15;
        res[11][11] = t11 + (30.0/77.0)*t14 + (243.0/1001.0)*t16;
    return res;
}
        

inline Foam::List<Foam::List<Foam::scalar>> eigenvalues(
    const Foam::List<Foam::scalar>& Q,
    const Foam::List<Foam::scalar>& Qaux,
    const Foam::vector& n)
{
    auto res = Foam::List<Foam::List<Foam::scalar>>(12, Foam::List<Foam::scalar>(1, 0.0));
    Foam::scalar t0 = (1.0 / Foam::pow(Q[1], 1));
        Foam::scalar t1 = n.x()*Q[2] + n.y()*Q[7];
        Foam::scalar t2 = t0*t1;
        Foam::scalar t3 = Foam::pow(Q[1], 3.0/2.0)*Foam::pow(1.0*9.81, 1.0/2.0)*Foam::pow(Foam::pow(n.x(), 2) + Foam::pow(n.y(), 2), 1.0/2.0);
        res[0][0] = 0;
        res[1][0] = t2;
        res[2][0] = t2;
        res[3][0] = t2;
        res[4][0] = t2;
        res[5][0] = t2;
        res[6][0] = t2;
        res[7][0] = t2;
        res[8][0] = t2;
        res[9][0] = t2;
        res[10][0] = t0*(t1 - t3);
        res[11][0] = t0*(t1 + t3);
    return res;
}
        

inline Foam::List<Foam::List<Foam::scalar>> left_eigenvectors(
    const Foam::List<Foam::scalar>& Q,
    const Foam::List<Foam::scalar>& Qaux)
{
    auto res = Foam::List<Foam::List<Foam::scalar>>(12, Foam::List<Foam::scalar>(12, 0.0));
    res[0][0] = 0;
        res[0][1] = 0;
        res[0][2] = 0;
        res[0][3] = 0;
        res[0][4] = 0;
        res[0][5] = 0;
        res[0][6] = 0;
        res[0][7] = 0;
        res[0][8] = 0;
        res[0][9] = 0;
        res[0][10] = 0;
        res[0][11] = 0;
        res[1][0] = 0;
        res[1][1] = 0;
        res[1][2] = 0;
        res[1][3] = 0;
        res[1][4] = 0;
        res[1][5] = 0;
        res[1][6] = 0;
        res[1][7] = 0;
        res[1][8] = 0;
        res[1][9] = 0;
        res[1][10] = 0;
        res[1][11] = 0;
        res[2][0] = 0;
        res[2][1] = 0;
        res[2][2] = 0;
        res[2][3] = 0;
        res[2][4] = 0;
        res[2][5] = 0;
        res[2][6] = 0;
        res[2][7] = 0;
        res[2][8] = 0;
        res[2][9] = 0;
        res[2][10] = 0;
        res[2][11] = 0;
        res[3][0] = 0;
        res[3][1] = 0;
        res[3][2] = 0;
        res[3][3] = 0;
        res[3][4] = 0;
        res[3][5] = 0;
        res[3][6] = 0;
        res[3][7] = 0;
        res[3][8] = 0;
        res[3][9] = 0;
        res[3][10] = 0;
        res[3][11] = 0;
        res[4][0] = 0;
        res[4][1] = 0;
        res[4][2] = 0;
        res[4][3] = 0;
        res[4][4] = 0;
        res[4][5] = 0;
        res[4][6] = 0;
        res[4][7] = 0;
        res[4][8] = 0;
        res[4][9] = 0;
        res[4][10] = 0;
        res[4][11] = 0;
        res[5][0] = 0;
        res[5][1] = 0;
        res[5][2] = 0;
        res[5][3] = 0;
        res[5][4] = 0;
        res[5][5] = 0;
        res[5][6] = 0;
        res[5][7] = 0;
        res[5][8] = 0;
        res[5][9] = 0;
        res[5][10] = 0;
        res[5][11] = 0;
        res[6][0] = 0;
        res[6][1] = 0;
        res[6][2] = 0;
        res[6][3] = 0;
        res[6][4] = 0;
        res[6][5] = 0;
        res[6][6] = 0;
        res[6][7] = 0;
        res[6][8] = 0;
        res[6][9] = 0;
        res[6][10] = 0;
        res[6][11] = 0;
        res[7][0] = 0;
        res[7][1] = 0;
        res[7][2] = 0;
        res[7][3] = 0;
        res[7][4] = 0;
        res[7][5] = 0;
        res[7][6] = 0;
        res[7][7] = 0;
        res[7][8] = 0;
        res[7][9] = 0;
        res[7][10] = 0;
        res[7][11] = 0;
        res[8][0] = 0;
        res[8][1] = 0;
        res[8][2] = 0;
        res[8][3] = 0;
        res[8][4] = 0;
        res[8][5] = 0;
        res[8][6] = 0;
        res[8][7] = 0;
        res[8][8] = 0;
        res[8][9] = 0;
        res[8][10] = 0;
        res[8][11] = 0;
        res[9][0] = 0;
        res[9][1] = 0;
        res[9][2] = 0;
        res[9][3] = 0;
        res[9][4] = 0;
        res[9][5] = 0;
        res[9][6] = 0;
        res[9][7] = 0;
        res[9][8] = 0;
        res[9][9] = 0;
        res[9][10] = 0;
        res[9][11] = 0;
        res[10][0] = 0;
        res[10][1] = 0;
        res[10][2] = 0;
        res[10][3] = 0;
        res[10][4] = 0;
        res[10][5] = 0;
        res[10][6] = 0;
        res[10][7] = 0;
        res[10][8] = 0;
        res[10][9] = 0;
        res[10][10] = 0;
        res[10][11] = 0;
        res[11][0] = 0;
        res[11][1] = 0;
        res[11][2] = 0;
        res[11][3] = 0;
        res[11][4] = 0;
        res[11][5] = 0;
        res[11][6] = 0;
        res[11][7] = 0;
        res[11][8] = 0;
        res[11][9] = 0;
        res[11][10] = 0;
        res[11][11] = 0;
    return res;
}
        

inline Foam::List<Foam::List<Foam::scalar>> right_eigenvectors(
    const Foam::List<Foam::scalar>& Q,
    const Foam::List<Foam::scalar>& Qaux)
{
    auto res = Foam::List<Foam::List<Foam::scalar>>(12, Foam::List<Foam::scalar>(12, 0.0));
    res[0][0] = 0;
        res[0][1] = 0;
        res[0][2] = 0;
        res[0][3] = 0;
        res[0][4] = 0;
        res[0][5] = 0;
        res[0][6] = 0;
        res[0][7] = 0;
        res[0][8] = 0;
        res[0][9] = 0;
        res[0][10] = 0;
        res[0][11] = 0;
        res[1][0] = 0;
        res[1][1] = 0;
        res[1][2] = 0;
        res[1][3] = 0;
        res[1][4] = 0;
        res[1][5] = 0;
        res[1][6] = 0;
        res[1][7] = 0;
        res[1][8] = 0;
        res[1][9] = 0;
        res[1][10] = 0;
        res[1][11] = 0;
        res[2][0] = 0;
        res[2][1] = 0;
        res[2][2] = 0;
        res[2][3] = 0;
        res[2][4] = 0;
        res[2][5] = 0;
        res[2][6] = 0;
        res[2][7] = 0;
        res[2][8] = 0;
        res[2][9] = 0;
        res[2][10] = 0;
        res[2][11] = 0;
        res[3][0] = 0;
        res[3][1] = 0;
        res[3][2] = 0;
        res[3][3] = 0;
        res[3][4] = 0;
        res[3][5] = 0;
        res[3][6] = 0;
        res[3][7] = 0;
        res[3][8] = 0;
        res[3][9] = 0;
        res[3][10] = 0;
        res[3][11] = 0;
        res[4][0] = 0;
        res[4][1] = 0;
        res[4][2] = 0;
        res[4][3] = 0;
        res[4][4] = 0;
        res[4][5] = 0;
        res[4][6] = 0;
        res[4][7] = 0;
        res[4][8] = 0;
        res[4][9] = 0;
        res[4][10] = 0;
        res[4][11] = 0;
        res[5][0] = 0;
        res[5][1] = 0;
        res[5][2] = 0;
        res[5][3] = 0;
        res[5][4] = 0;
        res[5][5] = 0;
        res[5][6] = 0;
        res[5][7] = 0;
        res[5][8] = 0;
        res[5][9] = 0;
        res[5][10] = 0;
        res[5][11] = 0;
        res[6][0] = 0;
        res[6][1] = 0;
        res[6][2] = 0;
        res[6][3] = 0;
        res[6][4] = 0;
        res[6][5] = 0;
        res[6][6] = 0;
        res[6][7] = 0;
        res[6][8] = 0;
        res[6][9] = 0;
        res[6][10] = 0;
        res[6][11] = 0;
        res[7][0] = 0;
        res[7][1] = 0;
        res[7][2] = 0;
        res[7][3] = 0;
        res[7][4] = 0;
        res[7][5] = 0;
        res[7][6] = 0;
        res[7][7] = 0;
        res[7][8] = 0;
        res[7][9] = 0;
        res[7][10] = 0;
        res[7][11] = 0;
        res[8][0] = 0;
        res[8][1] = 0;
        res[8][2] = 0;
        res[8][3] = 0;
        res[8][4] = 0;
        res[8][5] = 0;
        res[8][6] = 0;
        res[8][7] = 0;
        res[8][8] = 0;
        res[8][9] = 0;
        res[8][10] = 0;
        res[8][11] = 0;
        res[9][0] = 0;
        res[9][1] = 0;
        res[9][2] = 0;
        res[9][3] = 0;
        res[9][4] = 0;
        res[9][5] = 0;
        res[9][6] = 0;
        res[9][7] = 0;
        res[9][8] = 0;
        res[9][9] = 0;
        res[9][10] = 0;
        res[9][11] = 0;
        res[10][0] = 0;
        res[10][1] = 0;
        res[10][2] = 0;
        res[10][3] = 0;
        res[10][4] = 0;
        res[10][5] = 0;
        res[10][6] = 0;
        res[10][7] = 0;
        res[10][8] = 0;
        res[10][9] = 0;
        res[10][10] = 0;
        res[10][11] = 0;
        res[11][0] = 0;
        res[11][1] = 0;
        res[11][2] = 0;
        res[11][3] = 0;
        res[11][4] = 0;
        res[11][5] = 0;
        res[11][6] = 0;
        res[11][7] = 0;
        res[11][8] = 0;
        res[11][9] = 0;
        res[11][10] = 0;
        res[11][11] = 0;
    return res;
}
        

inline Foam::List<Foam::List<Foam::scalar>> source(
    const Foam::List<Foam::scalar>& Q,
    const Foam::List<Foam::scalar>& Qaux)
{
    auto res = Foam::List<Foam::List<Foam::scalar>>(12, Foam::List<Foam::scalar>(1, 0.0));
    res[0][0] = 0;
        res[1][0] = 0;
        res[2][0] = 0;
        res[3][0] = 0;
        res[4][0] = 0;
        res[5][0] = 0;
        res[6][0] = 0;
        res[7][0] = 0;
        res[8][0] = 0;
        res[9][0] = 0;
        res[10][0] = 0;
        res[11][0] = 0;
    return res;
}
        

inline Foam::List<Foam::List<Foam::scalar>> residual(
    const Foam::List<Foam::scalar>& Q,
    const Foam::List<Foam::scalar>& Qaux)
{
    auto res = Foam::List<Foam::List<Foam::scalar>>(12, Foam::List<Foam::scalar>(1, 0.0));
    res[0][0] = 0;
        res[1][0] = 0;
        res[2][0] = 0;
        res[3][0] = 0;
        res[4][0] = 0;
        res[5][0] = 0;
        res[6][0] = 0;
        res[7][0] = 0;
        res[8][0] = 0;
        res[9][0] = 0;
        res[10][0] = 0;
        res[11][0] = 0;
    return res;
}
        

inline Foam::List<Foam::List<Foam::scalar>> source_implicit(
    const Foam::List<Foam::scalar>& Q,
    const Foam::List<Foam::scalar>& Qaux)
{
    auto res = Foam::List<Foam::List<Foam::scalar>>(12, Foam::List<Foam::scalar>(1, 0.0));
    res[0][0] = 0;
        res[1][0] = 0;
        res[2][0] = 0;
        res[3][0] = 0;
        res[4][0] = 0;
        res[5][0] = 0;
        res[6][0] = 0;
        res[7][0] = 0;
        res[8][0] = 0;
        res[9][0] = 0;
        res[10][0] = 0;
        res[11][0] = 0;
    return res;
}
        

inline Foam::List<Foam::List<Foam::scalar>> interpolate(
    const Foam::List<Foam::scalar>& Q,
    const Foam::List<Foam::scalar>& Qaux,
    const Foam::vector& X)
{
    auto res = Foam::List<Foam::List<Foam::scalar>>(6, Foam::List<Foam::scalar>(1, 0.0));
    Foam::scalar t0 = (1.0 / Foam::pow(Q[1], 1));
        Foam::scalar t1 = 2*X.z() - 1;
        Foam::scalar t2 = Foam::pow(t1, 2);
        Foam::scalar t3 = t0*(1.5*t2 - 0.5);
        Foam::scalar t4 = -3*X.z();
        Foam::scalar t5 = Foam::pow(t1, 3);
        Foam::scalar t6 = t0*(-t4 - 2.5*t5 - 1.5);
        Foam::scalar t7 = Foam::pow(t1, 4);
        Foam::scalar t8 = t0*(-3.75*t2 + 4.375*t7 + 0.375);
        Foam::scalar t9 = Q[2]*t0;
        Foam::scalar t10 = -t0*t1;
        Foam::scalar t11 = Q[3]*t10 + t9;
        Foam::scalar t12 = Q[7]*t0;
        Foam::scalar t13 = Q[8]*t10 + t12;
        Foam::scalar t14 = -X.z();
        Foam::scalar t15 = Foam::pow(X.z(), 2);
        Foam::scalar t16 = -t14 - t15;
        Foam::scalar t17 = Foam::pow(X.z(), 3);
        Foam::scalar t18 = X.z() - 3*t15 + 2*t17;
        Foam::scalar t19 = Foam::pow(X.z(), 4);
        Foam::scalar t20 = -t14 - 6*t15 + 10*t17 - 5*t19;
        Foam::scalar t21 = 14*Foam::pow(X.z(), 5) + X.z() - 10*t15 + 30*t17 - 35*t19;
        Foam::scalar t22 = t0*((3.0/2.0)*t2 - 1.0/2.0);
        Foam::scalar t23 = t0*(-t4 - 5.0/2.0*t5 - 3.0/2.0);
        Foam::scalar t24 = t0*(-15.0/4.0*t2 + (35.0/8.0)*t7 + 3.0/8.0);
        Foam::scalar t25 = t0*t16;
        Foam::scalar t26 = t0*t18;
        Foam::scalar t27 = t0*t20;
        Foam::scalar t28 = t0*t21;
        res[0][0] = Q[0];
        res[1][0] = Q[1];
        res[2][0] = Q[4]*t3 + Q[5]*t6 + Q[6]*t8 + t11;
        res[3][0] = Q[10]*t6 + Q[11]*t8 + Q[9]*t3 + t13;
        res[4][0] = -Q[1]*(X.z()*Qaux[14] + Qaux[15]*t16 + Qaux[16]*t18 + Qaux[17]*t20 + Qaux[18]*t21) - Q[1]*(X.z()*Qaux[2] + Qaux[3]*t16 + Qaux[4]*t18 + Qaux[5]*t20 + Qaux[6]*t21) - Qaux[1]*(X.z()*t9 + Q[3]*t25 + Q[4]*t26 + Q[5]*t27 + Q[6]*t28) - Qaux[13]*(X.z()*t12 + Q[10]*t27 + Q[11]*t28 + Q[8]*t25 + Q[9]*t26) + (X.z()*Qaux[1] + Qaux[0])*(Q[4]*t22 + Q[5]*t23 + Q[6]*t24 + t11) + (X.z()*Qaux[13] + Qaux[12])*(Q[10]*t23 + Q[11]*t24 + Q[9]*t22 + t13);
        res[5][0] = 9810.0*Q[1]*(1 - X.z());
    return res;
}
        

inline Foam::List<Foam::List<Foam::scalar>> boundary_conditions(
    const Foam::List<Foam::scalar>& Q,
    const Foam::List<Foam::scalar>& Qaux,
    const Foam::vector& n,
    const Foam::vector& X,
    const Foam::scalar& time,
    const Foam::scalar& dX)
{
    auto res = Foam::List<Foam::List<Foam::scalar>>(3, Foam::List<Foam::scalar>(12, 0.0));
    Foam::scalar t0 = 1.0*n.x();
        Foam::scalar t1 = 1.0*n.y();
        Foam::scalar t2 = Q[2]*t0 + Q[7]*t1;
        Foam::scalar t3 = -n.x()*t2;
        Foam::scalar t4 = Q[3]*t0 + Q[8]*t1;
        Foam::scalar t5 = -n.x()*t4;
        Foam::scalar t6 = Q[4]*t0 + Q[9]*t1;
        Foam::scalar t7 = -n.x()*t6;
        Foam::scalar t8 = Q[10]*t1 + Q[5]*t0;
        Foam::scalar t9 = -n.x()*t8;
        Foam::scalar t10 = Q[11]*t1 + Q[6]*t0;
        Foam::scalar t11 = -n.x()*t10;
        Foam::scalar t12 = -n.y()*t2;
        Foam::scalar t13 = -n.y()*t4;
        Foam::scalar t14 = -n.y()*t6;
        Foam::scalar t15 = -n.y()*t8;
        Foam::scalar t16 = -n.y()*t10;
        res[0][0] = Q[0];
        res[0][1] = Q[1];
        res[0][2] = t3;
        res[0][3] = t5;
        res[0][4] = t7;
        res[0][5] = t9;
        res[0][6] = t11;
        res[0][7] = t12;
        res[0][8] = t13;
        res[0][9] = t14;
        res[0][10] = t15;
        res[0][11] = t16;
        res[1][0] = Q[0];
        res[1][1] = Q[1];
        res[1][2] = t3;
        res[1][3] = t5;
        res[1][4] = t7;
        res[1][5] = t9;
        res[1][6] = t11;
        res[1][7] = t12;
        res[1][8] = t13;
        res[1][9] = t14;
        res[1][10] = t15;
        res[1][11] = t16;
        res[2][0] = Q[0];
        res[2][1] = Q[1];
        res[2][2] = t3;
        res[2][3] = t5;
        res[2][4] = t7;
        res[2][5] = t9;
        res[2][6] = t11;
        res[2][7] = t12;
        res[2][8] = t13;
        res[2][9] = t14;
        res[2][10] = t15;
        res[2][11] = t16;
    return res;
}
        

inline Foam::List<Foam::List<Foam::scalar>> basis(
    const Foam::scalar& z)
{
    auto res = Foam::List<Foam::List<Foam::scalar>>(5, Foam::List<Foam::scalar>(1, 0.0));
    Foam::scalar t0 = 2*z - 1;
        Foam::scalar t1 = Foam::pow(t0, 2);
        res[0][0] = 1;
        res[1][0] = -t0;
        res[2][0] = (3.0/2.0)*t1 - 1.0/2.0;
        res[3][0] = -5.0/2.0*Foam::pow(t0, 3) + 3*z - 3.0/2.0;
        res[4][0] = (35.0/8.0)*Foam::pow(t0, 4) - 15.0/4.0*t1 + 3.0/8.0;
    return res;
}
        
} // namespace Model
