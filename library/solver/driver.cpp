// TODO This needs to be auto generated by the make file!
#include "../../outputs/output_c/c_interface/Model/boundary_conditions_code.h"
#include "../../outputs/output_c/c_interface/Model/model_code.h"
// #include "../../dependencies/hdf5/c++/src/H5Cpp.h"
// #include "pnetcdf.h"
#include "hdf5.h"
#include "settings.h"
#include "mesh.h"
#include "model.h"


#include <iostream>
#include <string>
#include <mpi.h>

// [x] settings struct
// [x] load settings
// [x] load mesh
// [x] load initial conditions
// [ ] load pde
// [ ] load bc
// [x] bc-mesh struct
// [x] load bc_mesh_mappings


int main(int argc, char** argv) {
	Settings settings = Settings("../outputs/output/settings.hdf5");
	Mesh mesh = Mesh("../outputs/output/mesh.hdf5");
	std::vector<std::vector<double>> Q;
	std::vector<std::vector<double>> Qaux;
	double time = 0.;
	hid_t file_fields = openHdf5("../outputs/output/fields.hdf5");
	time = loadFieldFromHdf5(file_fields, 0, Q, Qaux);
	std::cout << "Q[0][0]: " << Q[0][0] << std::endl;
    H5Fclose(file_fields);

	// Model<1> model;

	std::cout << "MAIN" << std::endl;

    // MPI_Init(&argc, &argv);
    // int rank;
    // MPI_Comm_rank(MPI_COMM_WORLD, &rank);

  	// std::cout << "MAIN Parallel" << std::endl;

	// MPI_Finalize();

	// Read command line arguments 
	//  if (argc != 4){
	//   std::cerr << RERROR "The program is run as: ./nprogram inputFolder/ outputFolder/ Nthreads" << std::endl;
	// 	  return 0;
	// }

	// {
	// SERGHEI serghei;
	
	// serghei.inFolder = argv[1];
	// serghei.outFolder = argv[2];

	// serghei.par.nthreads = atoi(argv[3]);
	
	// if(!serghei.start(argc, argv)) return 0;
	// if(!serghei.compute()) return 0;
	// if(!serghei.finalise()) return 0;
  
	// } // scope guard required to ensure serghei destructor is called

	// Kokkos::finalize();
 //  MPI_Finalize();

	return 1;
}
