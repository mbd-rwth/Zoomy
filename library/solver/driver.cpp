// TODO This needs to be auto generated by the make file!
#include<Kokkos_Core.hpp>
//#include <petscksp.h>

#include <iostream>
#include <string>
#include <mpi.h>
#include <chrono>
#include <cstdlib>


int main(int argc, char **argv)
{
	auto start_main = std::chrono::high_resolution_clock::now();
	// read make parameters
	const char* env_n_threads = std::getenv("OMP_N_THREADS");
	int n_threads = 1; // Default value
	if (env_n_threads) {
	    try {
	        n_threads = std::stoi(env_n_threads);
	    } catch (std::invalid_argument& e) {
	        std::cout << "Invalid value for OMP_N_THREADS, using default value 1" << std::endl;
	    }
	} else {
	    std::cout << "OMP_N_THREADS not set, using default value 1" << std::endl;
	}

	// PetscInt n = 10;
	//PetscMPIInt size;

	//PetscFunctionBeginUser;
  	//PetscCall(PetscInitialize(&argc, &argv, (char *)0, ""));
  	//PetscCallMPI(MPI_Comm_size(PETSC_COMM_WORLD, &size));
  	//PetscCheck(size == 1, PETSC_COMM_WORLD, PETSC_ERR_WRONG_MPI_SIZE, "This is a uniprocessor example only!");
  	// PetscCall(PetscOptionsGetInt(NULL, NULL, "-n", &n, NULL));


	Kokkos::Timer timer;
	double time_start = timer.seconds();
  	Kokkos::InitializationSettings kokkosSettings;
	if(n_threads!=0) kokkosSettings.set_num_threads(n_threads);

	Kokkos::initialize(kokkosSettings);
	{
		std::cout << "C program running" << std::endl;
	}
	double time_end = timer.seconds();
	std::cout << "Time elapsed: " << time_end - time_start << std::endl;
	Kokkos::finalize();
	auto end = std::chrono::high_resolution_clock::now();
	std::chrono::duration<double> diff_main = end-start_main;
	std::cout << "Total time: " << diff_main.count() << " s\n";
  	//PetscCall(PetscFinalize());
	return 0;
}
